// server-sem-banco.js
// Servidor que funciona SEM PostgreSQL para demonstra√ß√£o

const express = require('express');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3000;

// Middlewares
app.use(cors());
app.use(express.json());

// Simula√ß√£o de banco em mem√≥ria para demonstra√ß√£o
let usuarios = [];
let nextId = 1;

// Fun√ß√£o para gerar c√≥digo de verifica√ß√£o
function gerarCodigo() {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

// === APIS DE USU√ÅRIOS (SEM BANCO DE DADOS) ===

/**
 * 1. CADASTRAR USU√ÅRIO
 */
app.post('/api/usuarios/cadastro', async (req, res) => {
  try {
    const { nome, email, telefone } = req.body;

    // Valida√ß√µes
    if (!nome) {
      return res.status(400).json({
        sucesso: false,
        erro: 'Nome √© obrigat√≥rio'
      });
    }

    if (!email && !telefone) {
      return res.status(400).json({
        sucesso: false,
        erro: 'Email ou telefone √© obrigat√≥rio'
      });
    }

    // Verificar se j√° existe
    const existe = usuarios.find(u => 
      (email && u.email === email) || 
      (telefone && u.telefone === telefone)
    );

    if (existe) {
      return res.status(409).json({
        sucesso: false,
        erro: 'Usu√°rio j√° cadastrado com este email ou telefone'
      });
    }

    // Criar usu√°rio
    const novoUsuario = {
      id: nextId++,
      nome: nome.trim(),
      email: email || null,
      telefone: telefone || null,
      codigo_verificacao: null,
      codigo_expira_em: null,
      email_verificado: false,
      telefone_verificado: false,
      ativo: true,
      data_criacao: new Date().toISOString(),
      ultimo_login: null
    };

    usuarios.push(novoUsuario);

    console.log(`‚úÖ Usu√°rio cadastrado: ${nome} - ${email || telefone}`);

    res.status(201).json({
      sucesso: true,
      mensagem: 'Usu√°rio cadastrado com sucesso!',
      usuario: {
        id: novoUsuario.id,
        nome: novoUsuario.nome,
        email: novoUsuario.email,
        telefone: novoUsuario.telefone
      }
    });

  } catch (error) {
    console.error('Erro no cadastro:', error);
    res.status(500).json({
      sucesso: false,
      erro: 'Erro interno do servidor'
    });
  }
});

/**
 * 2. ENVIAR C√ìDIGO POR EMAIL
 */
app.post('/api/usuarios/codigo-email', async (req, res) => {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({
        sucesso: false,
        erro: 'Email √© obrigat√≥rio'
      });
    }

    // Buscar ou criar usu√°rio
    let usuario = usuarios.find(u => u.email === email);

    if (!usuario) {
      // Criar usu√°rio automaticamente (padr√£o iFood)
      usuario = {
        id: nextId++,
        nome: `Usu√°rio ${email.split('@')[0]}`,
        email: email,
        telefone: null,
        codigo_verificacao: null,
        codigo_expira_em: null,
        email_verificado: false,
        telefone_verificado: false,
        ativo: true,
        data_criacao: new Date().toISOString(),
        ultimo_login: null
      };
      usuarios.push(usuario);
      console.log(`üÜï Usu√°rio criado automaticamente: ${email}`);
    }

    // Gerar e salvar c√≥digo
    const codigo = gerarCodigo();
    const expiraEm = new Date(Date.now() + 15 * 60 * 1000); // 15 minutos

    usuario.codigo_verificacao = codigo;
    usuario.codigo_expira_em = expiraEm.toISOString();

    // Simular envio de email
    console.log('üìß C√ìDIGO DE VERIFICA√á√ÉO POR EMAIL');
    console.log(`Email: ${email}`);
    console.log(`C√≥digo: ${codigo}`);
    console.log(`Expira: ${expiraEm.toLocaleString()}`);
    console.log('‚îÄ'.repeat(50));

    res.json({
      sucesso: true,
      mensagem: 'C√≥digo enviado por email',
      codigoParaTeste: codigo // Para facilitar testes acad√™micos
    });

  } catch (error) {
    console.error('Erro ao enviar c√≥digo por email:', error);
    res.status(500).json({
      sucesso: false,
      erro: 'Erro interno do servidor'
    });
  }
});

/**
 * 3. ENVIAR C√ìDIGO POR SMS
 */
app.post('/api/usuarios/codigo-sms', async (req, res) => {
  try {
    const { telefone } = req.body;

    if (!telefone) {
      return res.status(400).json({
        sucesso: false,
        erro: 'Telefone √© obrigat√≥rio'
      });
    }

    // Buscar ou criar usu√°rio
    let usuario = usuarios.find(u => u.telefone === telefone);

    if (!usuario) {
      usuario = {
        id: nextId++,
        nome: `Usu√°rio ${telefone}`,
        email: null,
        telefone: telefone,
        codigo_verificacao: null,
        codigo_expira_em: null,
        email_verificado: false,
        telefone_verificado: false,
        ativo: true,
        data_criacao: new Date().toISOString(),
        ultimo_login: null
      };
      usuarios.push(usuario);
      console.log(`üÜï Usu√°rio criado automaticamente: ${telefone}`);
    }

    // Gerar e salvar c√≥digo
    const codigo = gerarCodigo();
    const expiraEm = new Date(Date.now() + 15 * 60 * 1000);

    usuario.codigo_verificacao = codigo;
    usuario.codigo_expira_em = expiraEm.toISOString();

    // Simular envio de SMS
    console.log('üì± C√ìDIGO DE VERIFICA√á√ÉO POR SMS');
    console.log(`Telefone: ${telefone}`);
    console.log(`C√≥digo: ${codigo}`);
    console.log(`Expira: ${expiraEm.toLocaleString()}`);
    console.log('‚îÄ'.repeat(50));

    res.json({
      sucesso: true,
      mensagem: 'C√≥digo enviado por SMS',
      codigoParaTeste: codigo
    });

  } catch (error) {
    console.error('Erro ao enviar c√≥digo por SMS:', error);
    res.status(500).json({
      sucesso: false,
      erro: 'Erro interno do servidor'
    });
  }
});

/**
 * 4. LOGIN COM C√ìDIGO
 */
app.post('/api/usuarios/login', async (req, res) => {
  try {
    const { identificador, codigo } = req.body;

    if (!identificador || !codigo) {
      return res.status(400).json({
        sucesso: false,
        erro: 'Identificador (email/telefone) e c√≥digo s√£o obrigat√≥rios'
      });
    }

    // Buscar usu√°rio
    const usuario = usuarios.find(u => 
      u.email === identificador || u.telefone === identificador
    );

    if (!usuario) {
      return res.status(404).json({
        sucesso: false,
        erro: 'Usu√°rio n√£o encontrado'
      });
    }

    if (!usuario.ativo) {
      return res.status(403).json({
        sucesso: false,
        erro: 'Conta desativada'
      });
    }

    // Verificar c√≥digo
    if (!usuario.codigo_verificacao || 
        usuario.codigo_verificacao !== codigo ||
        !usuario.codigo_expira_em ||
        new Date() > new Date(usuario.codigo_expira_em)) {
      return res.status(400).json({
        sucesso: false,
        erro: 'C√≥digo inv√°lido ou expirado'
      });
    }

    // Login bem-sucedido
    usuario.codigo_verificacao = null;
    usuario.codigo_expira_em = null;
    usuario.ultimo_login = new Date().toISOString();

    if (identificador.includes('@')) {
      usuario.email_verificado = true;
    } else {
      usuario.telefone_verificado = true;
    }

    console.log(`üîê Login realizado: ${usuario.nome} (${identificador})`);

    res.json({
      sucesso: true,
      mensagem: 'Login realizado com sucesso',
      token: `token_${usuario.id}_${Date.now()}`,
      usuario: {
        id: usuario.id,
        nome: usuario.nome,
        email: usuario.email,
        telefone: usuario.telefone,
        email_verificado: usuario.email_verificado,
        telefone_verificado: usuario.telefone_verificado,
        ultimo_login: usuario.ultimo_login
      }
    });

  } catch (error) {
    console.error('Erro no login:', error);
    res.status(500).json({
      sucesso: false,
      erro: 'Erro interno do servidor'
    });
  }
});

/**
 * 5. LISTAR USU√ÅRIOS
 */
app.get('/api/usuarios', (req, res) => {
  try {
    const usuariosAtivos = usuarios.filter(u => u.ativo);
    
    res.json({
      sucesso: true,
      total: usuariosAtivos.length,
      usuarios: usuariosAtivos.map(u => ({
        id: u.id,
        nome: u.nome,
        email: u.email,
        telefone: u.telefone,
        email_verificado: u.email_verificado,
        telefone_verificado: u.telefone_verificado,
        data_criacao: u.data_criacao,
        ultimo_login: u.ultimo_login
      }))
    });
  } catch (error) {
    console.error('Erro ao listar usu√°rios:', error);
    res.status(500).json({
      sucesso: false,
      erro: 'Erro interno do servidor'
    });
  }
});

/**
 * 6. BUSCAR USU√ÅRIO POR ID
 */
app.get('/api/usuarios/:id', (req, res) => {
  try {
    const id = parseInt(req.params.id);
    const usuario = usuarios.find(u => u.id === id && u.ativo);

    if (!usuario) {
      return res.status(404).json({
        sucesso: false,
        erro: 'Usu√°rio n√£o encontrado'
      });
    }

    res.json({
      sucesso: true,
      usuario: {
        id: usuario.id,
        nome: usuario.nome,
        email: usuario.email,
        telefone: usuario.telefone,
        email_verificado: usuario.email_verificado,
        telefone_verificado: usuario.telefone_verificado,
        data_criacao: usuario.data_criacao,
        ultimo_login: usuario.ultimo_login
      }
    });
  } catch (error) {
    console.error('Erro ao buscar usu√°rio:', error);
    res.status(500).json({
      sucesso: false,
      erro: 'Erro interno do servidor'
    });
  }
});

/**
 * 7. ATUALIZAR USU√ÅRIO
 */
app.put('/api/usuarios/:id', (req, res) => {
  try {
    const id = parseInt(req.params.id);
    const { nome, telefone } = req.body;
    
    const usuario = usuarios.find(u => u.id === id && u.ativo);

    if (!usuario) {
      return res.status(404).json({
        sucesso: false,
        erro: 'Usu√°rio n√£o encontrado'
      });
    }

    if (nome) usuario.nome = nome.trim();
    if (telefone) usuario.telefone = telefone;

    console.log(`üìù Usu√°rio atualizado: ${usuario.nome} (ID: ${id})`);

    res.json({
      sucesso: true,
      mensagem: 'Usu√°rio atualizado com sucesso',
      usuario: {
        id: usuario.id,
        nome: usuario.nome,
        email: usuario.email,
        telefone: usuario.telefone
      }
    });
  } catch (error) {
    console.error('Erro ao atualizar usu√°rio:', error);
    res.status(500).json({
      sucesso: false,
      erro: 'Erro interno do servidor'
    });
  }
});

/**
 * 8. DESATIVAR USU√ÅRIO
 */
app.delete('/api/usuarios/:id', (req, res) => {
  try {
    const id = parseInt(req.params.id);
    const usuario = usuarios.find(u => u.id === id && u.ativo);

    if (!usuario) {
      return res.status(404).json({
        sucesso: false,
        erro: 'Usu√°rio n√£o encontrado'
      });
    }

    usuario.ativo = false;
    console.log(`üóëÔ∏è Usu√°rio desativado: ${usuario.nome} (ID: ${id})`);

    res.json({
      sucesso: true,
      mensagem: 'Usu√°rio desativado com sucesso'
    });
  } catch (error) {
    console.error('Erro ao desativar usu√°rio:', error);
    res.status(500).json({
      sucesso: false,
      erro: 'Erro interno do servidor'
    });
  }
});

// Rota de status
app.get('/api/status', (req, res) => {
  res.json({
    status: 'OK',
    mensagem: 'üöÄ World Bite API - Servidor SEM Banco de Dados',
    modo: 'MEM√ìRIA (Ideal para Testes Acad√™micos)',
    usuarios_cadastrados: usuarios.filter(u => u.ativo).length,
    apis: {
      usuarios: {
        cadastro: 'POST /api/usuarios/cadastro',
        codigo_email: 'POST /api/usuarios/codigo-email',
        codigo_sms: 'POST /api/usuarios/codigo-sms',
        login: 'POST /api/usuarios/login',
        listar: 'GET /api/usuarios',
        buscar: 'GET /api/usuarios/:id',
        atualizar: 'PUT /api/usuarios/:id',
        desativar: 'DELETE /api/usuarios/:id'
      }
    },
    observacoes: [
      '‚úÖ Funciona SEM PostgreSQL',
      '‚úÖ Dados em mem√≥ria (resetam ao reiniciar)',
      '‚úÖ C√≥digos aparecem no console',
      '‚úÖ Ideal para demonstra√ß√µes acad√™micas'
    ],
    timestamp: new Date().toISOString()
  });
});

// Rota raiz
app.get('/', (req, res) => {
  res.json({
    mensagem: 'World Bite API - Servidor Acad√™mico',
    status: 'Funcionando sem banco de dados',
    documentacao: 'GET /api/status'
  });
});

// Iniciar servidor
app.listen(PORT, () => {
  console.log('üöÄ ================================');
  console.log(`üìç Servidor rodando em http://localhost:${PORT}`);
  console.log('üí° Servidor SEM banco de dados (dados em mem√≥ria)');
  console.log('üéì Ideal para demonstra√ß√µes acad√™micas');
  console.log('üìä Status: GET /api/status');
  console.log('================================');
});