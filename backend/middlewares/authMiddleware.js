// backend/middlewares/authMiddleware.js

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// Middleware para verificar se o CNPJ foi enviado e obter o ID do restaurante
const authRestaurante = async (req, res, next) => {
    
    const authHeader = req.headers['authorization'];
    
    // 1. Verifica se o cabe√ßalho est√° presente e no formato correto
    if (!authHeader || !authHeader.startsWith('CNPJ ')) {
        return res.status(401).json({ error: 'Acesso negado. CNPJ n√£o fornecido no cabe√ßalho.' });
    }

    // 2. Extrai o CNPJ puro do cabe√ßalho
    const cnpjComFormato = authHeader.split(' ')[1];
    
    if (!cnpjComFormato) {
        return res.status(401).json({ error: 'CNPJ inv√°lido.' });
    }
    
    // 3. Limpa o CNPJ (remove pontos, tra√ßos, barras)
    const cnpjLimpo = cnpjComFormato.replace(/[^\d]/g, '');

    try {
        // 4. Busca o restaurante no banco de dados
        const restaurante = await prisma.restaurante.findUnique({
            where: { cnpj: cnpjLimpo },
            select: { id: true, nome: true }
        });

        // 5. Se n√£o encontrar o restaurante, nega o acesso
        if (!restaurante) {
            return res.status(404).json({ error: 'Restaurante n√£o encontrado ou inativo.' });
        }

        // 6. Anexa o ID e o Nome do restaurante √† requisi√ß√£o
        req.restauranteId = restaurante.id;
        req.restauranteNome = restaurante.nome; 
        
        // 7. Chama a pr√≥xima fun√ß√£o/rota
        next(); 

    } catch (error) {
        console.error('Erro de autentica√ß√£o:', error);
        return res.status(500).json({ error: 'Erro interno no servidor de autentica√ß√£o.' });
    }
};

// üîë Exporta a fun√ß√£o usando CommonJS para ser compat√≠vel com require()
module.exports = authRestaurante;